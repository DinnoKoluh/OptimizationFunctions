% Bisekcioni metod

% fun = {@(x) x.^3-2*x-5};
% eps = 1e-5;
% maxIter = 50;
% a = 5;
% b = 2;
% plt = 1;
% [x_min1, iter1, error1] = bisectionMethod(fun, a, b, eps, maxIter, plt);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Newtonov metod
% fun = {@(x) x.^3-2*x-5};
% eps = 1e-5;
% maxIter = 20;
% x_0 = 1.5;
% [x_min2, iter2, error2] = newtonsMethod(fun, x_0, eps, maxIter);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% % % % % % % Metod kvadratne interpolacije % % % % % %
% fun = {@(x) x.^3-2*x-5};
% eps = 1e-5;
% maxIter = 50;
% x_L = 0;
% x_r = 2;
% [x_min3, iter3, error3] = quadraticInterpolMethod(fun, x_L, x_r, eps, maxIter);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

method1 = 'ExactLineSearch';
method2 = 'BacktrackingLineSearch';
% Gradijentni metod
% fun = {@(x) 3*x(1,1)^2+x(2,1)^2 + 4};
% eps = 1e-5;
% maxIter = 50;
% x_0 = [2; 2];
% [x_min4, iter4, error4] = gradDescent (fun, x_0, eps, maxIter, method2);

% DZ
maxIter = 500;
eps = 0.005;

fun1 = {@(x) x(1,1).^2 + x(2,1).^2-2*x(1,1)*x(2,1)};
x_01 = [1;0];
[x_min01, iter01, error01] = gradDescent (fun1, x_01, eps, maxIter, method2);

fun2 = {@(x) 10*x(1,1)^4-20*x(1,1)^2*x(2,1)+10*x(2,1)^2+x(1,1)^2-2*x(1,1) + 5};
x_02 = [-1;3];
[x_min02, iter02, error02] = gradDescent (fun2, x_02, eps, maxIter, method1);

fun3 = {@(x) x(1,1)^2 + 2*x(2,1)^2 + 2*x(3,1)^2 + 2*x(1,1)*x(2,1) + 2*x(2,1)*x(3,1)};
x_03 = [2; 4; 10];
[x_min03, iter03, error03] = gradDescent (fun3, x_03, eps, maxIter, method1);


f1_plot = @(x1, x2) x1.^2 + x2.^2-2*x1*x2;
f2_plot = @(x1, x2)  10*x1.^4-20*x1.^2*x2+10*x2.^2+x1.^2-2*x1 + 5;

functionPlot(f1_plot)



